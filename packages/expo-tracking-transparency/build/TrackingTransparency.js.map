{"version":3,"file":"TrackingTransparency.js","sourceRoot":"","sources":["../src/TrackingTransparency.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAGxC,OAAO,wBAAwB,MAAM,4BAA4B,CAAC;AAClE,OAAO,EAAE,gCAAgC,EAAE,MAAM,8BAA8B,CAAC;AAEhF,cAAc,8BAA8B,CAAC;AAE7C;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,CAAC,KAAK,UAAU,+BAA+B;IACnD,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,OAAO,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;KAC1D;IAED,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,EAAE;QACrD,MAAM,IAAI,mBAAmB,CAAC,sBAAsB,EAAE,yBAAyB,CAAC,CAAC;KAClF;IACD,OAAO,MAAM,wBAAwB,CAAC,uBAAuB,EAAE,CAAC;AAClE,CAAC;AAED;;;;;;;;;;;;;;GAcG;AACH,MAAM,CAAC,KAAK,UAAU,2BAA2B;IAC/C,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,OAAO,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;KAC1D;IAED,IAAI,CAAC,wBAAwB,CAAC,mBAAmB,EAAE;QACjD,MAAM,IAAI,mBAAmB,CAAC,sBAAsB,EAAE,qBAAqB,CAAC,CAAC;KAC9E;IACD,OAAO,MAAM,wBAAwB,CAAC,mBAAmB,EAAE,CAAC;AAC9D,CAAC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { Platform } from 'react-native';\nimport { PermissionResponse } from 'unimodules-permissions-interface';\n\nimport ExpoTrackingTransparency from './ExpoTrackingTransparency';\nimport { androidAndWebPermissionsResponse } from './TrackingTransparency.types';\n\nexport * from './TrackingTransparency.types';\n\n/**\n * Requests the user to authorize or deny access to app-related data that\n * can be used for tracking the user or the device. Examples of data used for tracking include\n * email address, device ID, advertising ID, etc.\n *\n * The system remembers the user’s choice and doesn’t prompt\n * again unless a user uninstalls and then reinstalls the app on the device.\n *\n *  *\n * @example\n * ```typescript\n * const { granted } = await requestTrackingPermissionsAsync();\n *\n * if (granted) {\n *   // Your app is authorized to track the user or their device\n * }\n * ```\n */\nexport async function requestTrackingPermissionsAsync(): Promise<PermissionResponse> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve(androidAndWebPermissionsResponse);\n  }\n\n  if (!ExpoTrackingTransparency.requestPermissionsAsync) {\n    throw new UnavailabilityError('TrackingTransparency', 'requestPermissionsAsync');\n  }\n  return await ExpoTrackingTransparency.requestPermissionsAsync();\n}\n\n/**\n * Checks whether or not the user has authorized the app to access app-related data that\n * can be used for tracking the user or the device. See `requestPermissionsAsync` for more\n * details.\n *\n *  *\n * @example\n * ```typescript\n * const { granted } = await getTrackingPermissionsAsync();\n *\n * if (granted) {\n *   // Your app is authorized to track the user or their device\n * }\n * ```\n */\nexport async function getTrackingPermissionsAsync(): Promise<PermissionResponse> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve(androidAndWebPermissionsResponse);\n  }\n\n  if (!ExpoTrackingTransparency.getPermissionsAsync) {\n    throw new UnavailabilityError('TrackingTransparency', 'getPermissionsAsync');\n  }\n  return await ExpoTrackingTransparency.getPermissionsAsync();\n}\n"]}